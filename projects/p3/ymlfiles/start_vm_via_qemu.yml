---
# Playbook name: Set up persistent QEMU VM on Desktop with auto-start at login
- name: QEMU Persistent VM on Desktop with Autostart
  hosts: win  # Targets Windows hosts in the 'win' group
  gather_facts: yes  # Gather system environment variables and facts

  vars:
    iso_path: "{{ ansible_env.USERPROFILE }}\Downloads"  # The user's Downloads folder
    external_path: "{{ ansible_env.USERPROFILE }}\Desktop\qemu"  # Main folder where VM disks will be stored
    disk_image: "{{ ansible_env.USERPROFILE }}\Desktop\qemu\vm.qcow2"  # Path to the VM disk file
    ram_mb: 2048  # Amount of RAM allocated to the VM (in MB)
    cpu_count: 2  # Number of CPUs allocated to the VM
    smb_share: "{{ ansible_env.USERPROFILE }}\Desktop\qemu"  # Path for host-guest file sharing
    ps1_path: "{{ ansible_env.USERPROFILE }}\Desktop\qemu\start-qemu.ps1"  # Path to the PowerShell file to start the VM
    bat_path: "{{ ansible_env.USERPROFILE }}\Desktop\qemu\start-qemu.bat"  # Path to the batch file for autostart

  tasks:
    - name: Ensure QEMU folder exists on Desktop
      ansible.windows.win_file:
        path: "{{ external_path }}"
        state: directory

    - name: Create QEMU PowerShell script (ISO selection on first run)
      ansible.windows.win_copy:
        dest: "{{ ps1_path }}"
        content: |
          # Define paths and settings
          $Log = "{{ external_path }}\log.txt"
          $FlagPath = "{{ external_path }}\boot_flag.txt"
          $SelectedISOPath = "{{ external_path }}\selected_iso.txt"
          $qemuPath = "C:\Program Files\qemu"
          $externalPath = "{{ external_path }}"
          $diskImage = "{{ disk_image }}"
          $bootFromISO = $true
          $isoPath = ""

          try {
              Add-Content $Log "`nRunning QEMU at $(Get-Date)`n"

              # Create disk image if not present
              if (-Not (Test-Path $diskImage)) {
                  & "$qemuPath\qemu-img.exe" create -f qcow2 $diskImage 20G
                  Add-Content $Log "Created new qcow2 disk: $diskImage"
              } else {
                  Add-Content $Log "Disk already exists, using existing: $diskImage"
              }

              # Check boot flag
              if (Test-Path $FlagPath) {
                  $flag = Get-Content $FlagPath
                  if ($flag -eq "1") {
                      $bootFromISO = $false
                      Add-Content $Log "Flag is 1: booting from disk only"
                  }
              }

              if ($bootFromISO) {
                  $isoFiles = Get-ChildItem "{{ iso_path }}" -Filter *.iso -Recurse
                  if ($isoFiles.Count -eq 0) {
                      Add-Content $Log "No ISO files found in Downloads folder"
                      throw "No ISO files found"
                  }

                  $options = @()
                  $index = 0
                  foreach ($iso in $isoFiles) {
                      $options += "{0}: {1}" -f $index, $iso.Name
                      $index++
                  }

                  $selection = Read-Host "Available ISOs:`n$($options -join "`n")`nSelect ISO by number"

                  if ($selection -match "^\d+$" -and [int]$selection -lt $isoFiles.Count) {
                      $chosenISO = $isoFiles[$selection].FullName
                      Set-Content $SelectedISOPath $chosenISO
                      Add-Content $Log "User selected ISO: $chosenISO"
                      $isoPath = $chosenISO
                  } else {
                      Add-Content $Log "Invalid selection"
                      throw "Invalid selection"
                  }

                  Set-Content $FlagPath "1"

                  & "$qemuPath\qemu-system-x86_64.exe" `
                      -accel whpx `
                      -m {{ ram_mb }} `
                      -smp {{ cpu_count }} `
                      -cdrom "$isoPath" `
                      -boot once=d,menu=off `
                      -drive file=$diskImage,format=qcow2 `
                      -net user,smb="{{ smb_share }}" `
                      -net nic `
                      -vga virtio `
                      -usb -device usb-tablet `
                      -display gtk
                  Add-Content $Log "Booted from ISO and updated flag"
              } else {
                  & "$qemuPath\qemu-system-x86_64.exe" `
                      -accel whpx `
                      -m {{ ram_mb }} `
                      -smp {{ cpu_count }} `
                      -boot order=c,menu=off `
                      -drive file=$diskImage,format=qcow2 `
                      -net user,smb="{{ smb_share }}" `
                      -net nic `
                      -vga virtio `
                      -usb -device usb-tablet `
                      -display gtk
                  Add-Content $Log "Booted from disk only"
              }
          }
          catch {
              Add-Content $Log "ERROR: $_"
          }

    - name: Create .bat file to launch QEMU script at user login
      ansible.windows.win_copy:
        dest: "{{ bat_path }}"
        content: |
          powershell.exe -ExecutionPolicy Bypass -File "{{ ps1_path }}"

    - name: Ensure .bat file is executable
      ansible.windows.win_file:
        path: "{{ bat_path }}"
        attributes: 'readonly'

    - name: Add .bat file to startup folder for automatic launch at login
      ansible.windows.win_copy:
        src: "{{ bat_path }}"
        dest: "{{ ansible_env.APPDATA }}\Microsoft\Windows\Start Menu\Programs\Startup\start-qemu.bat"
        remote_src: yes
